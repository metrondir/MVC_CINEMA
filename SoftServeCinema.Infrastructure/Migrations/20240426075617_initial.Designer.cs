// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftServeCinema.Infrastructure.Data;

#nullable disable

namespace SoftServeCinema.Infrastructure.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20240426075617_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ActorEntityMovieEntity", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorEntityMovieEntity");

                    b.HasData(
                        new
                        {
                            ActorsId = 1,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 2,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 3,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 4,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 5,
                            MoviesId = 2
                        },
                        new
                        {
                            ActorsId = 6,
                            MoviesId = 2
                        },
                        new
                        {
                            ActorsId = 7,
                            MoviesId = 2
                        });
                });

            modelBuilder.Entity("DirectorEntityMovieEntity", b =>
                {
                    b.Property<int>("DirectorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("DirectorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("DirectorEntityMovieEntity");

                    b.HasData(
                        new
                        {
                            DirectorsId = 1,
                            MoviesId = 1
                        },
                        new
                        {
                            DirectorsId = 2,
                            MoviesId = 2
                        });
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreEntityMovieEntity");

                    b.HasData(
                        new
                        {
                            GenresId = 1,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 2,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 3,
                            MoviesId = 1
                        },
                        new
                        {
                            GenresId = 2,
                            MoviesId = 2
                        },
                        new
                        {
                            GenresId = 4,
                            MoviesId = 2
                        });
                });

            modelBuilder.Entity("MovieEntityTagEntity", b =>
                {
                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("MoviesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("MovieEntityTagEntity");

                    b.HasData(
                        new
                        {
                            MoviesId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            MoviesId = 2,
                            TagsId = 2
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.ActorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Кірстен Данст"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Джессі Племенс"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Кейлі Спені"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Соноя Мідзуно"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Раян Ґослінґ"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Емілі Блант"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Аарон Тейлор-Джонсон"
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.DirectorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Алекс Ґарленд"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Девід Літч"
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.GenreEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "епічний"
                        },
                        new
                        {
                            Id = 2,
                            Name = "екшн"
                        },
                        new
                        {
                            Id = 3,
                            Name = "антиутопія"
                        },
                        new
                        {
                            Id = 4,
                            Name = "комедія"
                        },
                        new
                        {
                            Id = 5,
                            Name = "трилер"
                        },
                        new
                        {
                            Id = 6,
                            Name = "жахи"
                        },
                        new
                        {
                            Id = 7,
                            Name = "пригоди"
                        },
                        new
                        {
                            Id = 8,
                            Name = "аніме"
                        },
                        new
                        {
                            Id = 9,
                            Name = "сімейний"
                        },
                        new
                        {
                            Id = 10,
                            Name = "драма"
                        },
                        new
                        {
                            Id = 11,
                            Name = "спорт"
                        },
                        new
                        {
                            Id = 12,
                            Name = "документальний"
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.MovieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<ushort>("Duration")
                        .HasColumnType("smallint unsigned");

                    b.Property<DateTime>("EndRentalDate")
                        .HasColumnType("datetime");

                    b.Property<ushort>("GraduationYear")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartRentalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Події розгортаються у найближчому майбутньому. Сполученими штатами котиться нищівна та всеохоплююча громадянська війна. Почалося із бажання кількох південних штатів відділитися і тепер уся країна охоплена бойовими діями. Група журналістів, серед яких відома репортерка (Кірстен Данст), яка і раніше часто знімала збройні конфлікти, рухаються у напрямку Вашингтона. Стає очевидним, що керівництво країни перетворилося на диктатуру, а повстанські угрупування повсюдно чинять воєнні злочини.",
                            Duration = (ushort)108,
                            EndRentalDate = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduationYear = (ushort)2024,
                            ImagePath = "/movies/sw-vend.jpg",
                            StartRentalDate = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Повстання Штатів",
                            TrailerUrl = "https://www.youtube.com/watch?v=my8iHV3dpNI"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "Джоді Морено (Емілі Блант) знімає свій перший фільм у якості режисера. Вона дуже старається та хвилюється. Добре, що на знімальному майданчику завжди є кому її підбадьорити. Кольт (Раян Ґослінґ) – каскадер. Колись вони зустрічалися з Джоді, а нині просто працюють разом та підтримують одне одного. Кольт дублює актора, який грає головну роль. Якось цей актор безслідно зникає. Ніхто не може знайти його, а це означає, що Джоді не зможе дознімати свій дебютний проект і це зруйнує її кар’єру. Кольт дуже не хоче, щоб так сталося, тож погоджується стати на деякий час детективом та розшукати актора, який невідомо куди подівся.",
                            Duration = (ushort)126,
                            EndRentalDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduationYear = (ushort)2024,
                            ImagePath = "/movies/fall_guy-vend.jpg",
                            StartRentalDate = new DateTime(2024, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Каскадер",
                            TrailerUrl = "https://www.youtube.com/watch?v=Xmi7ZsHL6Jg"
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.SessionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("VipPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "18+"
                        },
                        new
                        {
                            Id = 2,
                            Name = "12+"
                        });
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<short>("RowNumber")
                        .HasColumnType("smallint");

                    b.Property<short>("SeatNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("SessionId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ActorEntityMovieEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.ActorEntity", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftServeCinema.Core.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorEntityMovieEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.DirectorEntity", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftServeCinema.Core.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreEntityMovieEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.GenreEntity", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftServeCinema.Core.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieEntityTagEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.MovieEntity", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftServeCinema.Core.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.SessionEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.MovieEntity", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.TicketEntity", b =>
                {
                    b.HasOne("SoftServeCinema.Core.Entities.SessionEntity", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.MovieEntity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("SoftServeCinema.Core.Entities.SessionEntity", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
